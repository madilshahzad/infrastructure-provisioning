name: Provision Infrastructure for the Application

permissions:
  id-token: write
  contents: write
  pull-requests: write

on:
  workflow_call:
    secrets:
      AWS_REGION:
        required: true
        description: AWS region for deployment
      S3_AWS_REGION:
        required: true
        description: AWS region for the S3 backend
      TF_STATE_S3_BUCKET:
        required: true
        description: Name of the S3 bucket for Terraform state
      TF_STATE_FILE_KEY:
        required: true
        description: Key name of the Terraform state file
      TF_STATE_DYNAMODB_TABLE:
        required: true
        description: DynamoDB table for Terraform state locking
      AWS_ACCOUNT_ID:
        required: true
        description: AWS Account ID for authentication
      NODE_ROLE_ARN:
        required: true
        description: Node role ARN
      MASTER_ROLE_ARN:
        required: true
        description: Master role ARN
      ASSUME_ROLE_ARN:
        required: true
        description: Assume role ARN
      KEY_NAME:
        required: true
        description: SSH Key name
      USER_1_ARN:
        required: true
        description: User 1 ARN
      USER_1_USERNAME:
        required: true
        description: User 1 username
      USER_2_ARN:
        required: true
        description: User 2 ARN
      USER_2_USERNAME:
        required: true
        description: User 2 username

    inputs:
      TF_ENVIRONMENT:
        description: Terraform environment (e.g., dev, prod)
        required: true
        type: string

  workflow_dispatch:
    inputs:
      TF_ENVIRONMENT:
        description: Terraform environment (e.g., dev, prod)
        required: true
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_AWS_REGION: ${{ secrets.S3_AWS_REGION }}
  TF_STATE_S3_BUCKET: ${{ secrets.TF_STATE_S3_BUCKET }}
  TF_STATE_FILE_KEY: ${{ secrets.TF_STATE_FILE_KEY }}
  TF_STATE_DYNAMODB_TABLE: ${{ secrets.TF_STATE_DYNAMODB_TABLE }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  handle-pull-request:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Generate `prod.tfvars` File
        run: |
          mkdir -p ./terraform/environments/${{ inputs.TF_ENVIRONMENT }}
          cat > ./terraform/environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars <<EOF
          node_role_arn      = "${{ secrets.NODE_ROLE_ARN }}"
          master_role_arn    = "${{ secrets.MASTER_ROLE_ARN }}"
          assume_role_arn    = "${{ secrets.ASSUME_ROLE_ARN }}"
          key_name           = "${{ secrets.KEY_NAME }}"
          users = [
            {
              user_arn = "${{ secrets.USER_1_ARN }}"
              username = "${{ secrets.USER_1_USERNAME }}"
              groups   = ["system:masters"]
            },
            {
              user_arn = "${{ secrets.USER_2_ARN }}"
              username = "${{ secrets.USER_2_USERNAME }}"
              groups   = ["system:masters"]
            }
          ]
          cluster_name       = "${{secrets.CLUSTER_NAME}}"
          cluster_version    = "${{secrets.CLUSTER_VERSION}}"
          node_group_name    = "${{secrets.NODE_GROUP_NAME}}"
          environment        = "${{ inputs.TF_ENVIRONMENT }}"
          vpc_name           = "${{ secrets.VPC_NAME }}"
          bastion_name       = "${{ secrets.BASTION_NAME }}"
          kubeconfig_path    = "${{ secrets.KUBECONFIG_PATH }}"
          region             = "${{ secrets.AWS_REGION }}"
          cluster_alias      = "${{ secrets.CLUSTER_ALIAS }}"
          EOF

      - name: Terraform Format
        id: fmt
        run: |
          terraform fmt -check
          if [ $? -ne 0 ]; then
            echo "Terraform files need formatting. Please run 'terraform fmt'."
            exit 1
          fi

      - name: Install tfsec
        id: install-tfsec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec --version

      - name: Run tfsec Security Scan
        id: tfsec-scan
        run: |
          tfsec .
        continue-on-error: true

      - name: Post tfsec Scan Results to PR
        if: ${{ steps.tfsec-scan.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const tfsecOutput = fs.readFileSync('tfsec.log', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `### tfsec Security Scan Results\n\`\`\`\n${tfsecOutput}\n\`\`\``
            });

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="region=${{ env.S3_AWS_REGION }}" \
            -backend-config="bucket=${{ env.TF_STATE_S3_BUCKET }}" \
            -backend-config="key=${{ inputs.TF_ENVIRONMENT }}/${{ env.TF_STATE_FILE_KEY }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_DYNAMODB_TABLE }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file=./environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars \
                         -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" > plan.txt

      - name: Post Terraform Plan to PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('plan.txt', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `### Terraform Plan Results\n\`\`\`\n${planOutput}\n\`\`\``
            });

  deploy-infrastructure:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/Terraform-GitHub-Action-OIDC 
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="region=${{ env.S3_AWS_REGION }}" \
            -backend-config="bucket=${{ env.TF_STATE_S3_BUCKET }}" \
            -backend-config="key=${{ inputs.TF_ENVIRONMENT }}/${{ env.TF_STATE_FILE_KEY }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_DYNAMODB_TABLE }}"

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file=./environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars \
                         -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Terraform Apply
        run: |
          terraform apply -var-file=./environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars \
                          -auto-approve \
                          -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}"
