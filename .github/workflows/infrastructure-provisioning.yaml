name: Provision Infrastructure for the Application

on:
  workflow_call:
    inputs:
      TF_ENVIRONMENT:
        description: Terraform environment (e.g., prod, dev)
        required: true
        type: string
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_STATE_S3_BUCKET: devops-assignment-prod-web-app
  TF_State_File_Key: "prod/java-web-app.tfstate"
  TF_STATE_DYNAMODB_TABLE: "devops-assignment-prod-terraform-state"

defaults:
  run:
    shell: bash
    working-directory: ./terraform

jobs:
  handle-pull-request:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Terraform Format
        id: fmt
        run: |
          terraform fmt -check
          if [ $? -ne 0 ]; then
            echo "Terraform files need formatting. Please run 'terraform fmt'."
            exit 1
          fi

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="bucket=${{ env.TF_STATE_S3_BUCKET }}" \
            -backend-config="key=${{ env.TF_State_File_Key }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_DYNAMODB_TABLE }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file=./environments/prod.tfvars -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" -var="cluster_admin_user_arn=${{ secrets.CLUSTER_ADMIN_ARN }}" > plan.txt
          cat plan.txt

      - name: Post Terraform Plan Status to PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('plan.txt', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `### Terraform Plan Results\n\`\`\`\n${planOutput}\n\`\`\``
            });

      - name: Set PR Status
        uses: actions/github-script@v6
        with:
          script: |
            const status = {
              state: 'success',
              description: 'Terraform plan completed successfully',
              context: 'Terraform Plan'
            };

            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              ...status
            });

  deploy-infrastructure:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHub-OIDC-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="bucket=${{ env.TF_STATE_S3_BUCKET }}" \
            -backend-config="key=${{ env.TF_State_File_Key }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_DYNAMODB_TABLE }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=./environments/prod.tfvars -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" -var="cluster_admin_user_arn=${{ secrets.CLUSTER_ADMIN_ARN }}"
        continue-on-error: true

      - name: Terraform Apply
        run: terraform apply -var-file=./environments/prod.tfvars -auto-approve -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" -var="cluster_admin_user_arn=${{ secrets.CLUSTER_ADMIN_ARN }}"
