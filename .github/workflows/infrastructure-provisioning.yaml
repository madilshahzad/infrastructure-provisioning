name: Provision Infrastructure for the Application

permissions:
  id-token: write
  contents: write
  pull-requests: write

on:
  workflow_call:
    secrets:
      AWS_REGION:
        required: true
        description: AWS region for deployment
      S3_AWS_REGION:
        required: true
        description: AWS region for the S3 backend
      TF_STATE_S3_BUCKET:
        required: true
        description: Name of the S3 bucket for Terraform state
      TF_STATE_FILE_KEY:
        required: true
        description: Key name of the Terraform state file
      TF_STATE_DYNAMODB_TABLE:
        required: true
        description: DynamoDB table for Terraform state locking
      AWS_ACCOUNT_ID:
        required: true
        description: AWS Account ID for authentication
      TERRAFORM_ROLE:
        required: true
        description: Role for Terraform actions
      GITHUB_ACTION_ROLE:
        required: true
        description: Role for general GitHub actions
    inputs:
      TF_ENVIRONMENT:
        description: Terraform environment (e.g., dev, prod)
        required: true
        type: string

  workflow_dispatch:
    inputs:
      TF_ENVIRONMENT:
        description: Terraform environment (e.g., dev, prod)
        required: true
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_AWS_REGION: ${{ secrets.S3_AWS_REGION }}
  TF_STATE_S3_BUCKET: ${{ secrets.TF_STATE_S3_BUCKET }}
  TF_STATE_FILE_KEY: ${{ secrets.TF_STATE_FILE_KEY }}
  TF_STATE_DYNAMODB_TABLE: ${{ secrets.TF_STATE_DYNAMODB_TABLE }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  generate-tfvars:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.GITHUB_ACTION_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Generate `prod.tfvars` File
        run: |
          mkdir -p ./terraform/environments/${{ inputs.TF_ENVIRONMENT }}
          cat > ./terraform/environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars <<'EOF'
          node_role_arn      = "${{ secrets.NODE_ROLE_ARN }}"
          master_role_arn    = "${{ secrets.MASTER_ROLE_ARN }}"
          assume_role_arn    = "${{ secrets.TERRAFORM_ROLE }}"
          key_name           = "${{ secrets.KEY_NAME }}"
          users = [
            {
              user_arn = "${{ secrets.USER_1_ARN }}"
              username = "${{ secrets.USER_1_USERNAME }}"
              groups   = ["system:masters"]
            },
            {
              user_arn = "${{ secrets.USER_2_ARN }}"
              username = "${{ secrets.USER_2_USERNAME }}"
              groups   = ["system:masters"]
            }
          ]
          cluster_name       = "${{ secrets.CLUSTER_NAME }}"
          cluster_version    = "${{ secrets.CLUSTER_VERSION }}"
          node_group_name    = "${{ secrets.NODE_GROUP_NAME }}"
          environment        = "${{ inputs.TF_ENVIRONMENT }}"
          vpc_name           = "${{ secrets.VPC_NAME }}"
          bastion_name       = "${{ secrets.BASTION_NAME }}"
          kubeconfig_path    = "${{ secrets.KUBECONFIG_PATH }}"
          region             = "${{ secrets.AWS_REGION }}"
          cluster_alias      = "${{ secrets.CLUSTER_ALIAS }}"
          EOF

      - name: Display Generated `prod.tfvars` File
        run: cat ./terraform/environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars

      - name: Upload `prod.tfvars` as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfvars-file
          path: ./terraform/environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars

  deploy-infrastructure:
    needs: generate-tfvars
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download `prod.tfvars` Artifact
        uses: actions/download-artifact@v3
        with:
          name: tfvars-file
          path: ./terraform/environments/${{ inputs.TF_ENVIRONMENT }}

      - name: Display Downloaded `prod.tfvars` File
        run: cat ./terraform/environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars

      - name: Configure AWS Credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.TERRAFORM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="region=${{ env.S3_AWS_REGION }}" \
            -backend-config="bucket=${{ env.TF_STATE_S3_BUCKET }}" \
            -backend-config="key=${{ inputs.TF_ENVIRONMENT }}/${{ env.TF_STATE_FILE_KEY }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_DYNAMODB_TABLE }}"

      - name: Terraform Plan
        run: |
          terraform plan -var-file=./terraform/environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars

      - name: Terraform Apply
        run: |
          terraform apply -var-file=./terraform/environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars \
                          -auto-approve
