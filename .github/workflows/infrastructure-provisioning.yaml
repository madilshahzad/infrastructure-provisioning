name: Provision Infrastructure for the Application

permissions:
    id-token: write
    contents: write
    pull-requests: write
    
on:
  workflow_call:
    inputs:
      TF_ENVIRONMENT:
        description: Terraform environment (e.g., dev, prod)
        required: true
        type: string

  workflow_dispatch:
    inputs:
      TF_ENVIRONMENT:
        description: Terraform environment (e.g., dev, prod)
        required: true
        type: string



env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_AWS_REGION: ${{ secrets.S3_AWS_REGION }}
  TF_STATE_S3_BUCKET: ${{ secrets.TF_STATE_S3_BUCKET }}
  TF_STATE_FILE_KEY: ${{ secrets.TF_STATE_FILE_KEY }}
  TF_STATE_DYNAMODB_TABLE: ${{ secrets.TF_STATE_DYNAMODB_TABLE }}

defaults:
  run:
    shell: bash
    working-directory: ./terraform

jobs:
  handle-pull-request:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Terraform Format
        id: fmt
        run: |
          terraform fmt -check
          if [ $? -ne 0 ]; then
            echo "Terraform files need formatting. Please run 'terraform fmt'."
            exit 1
          fi

      - name: Install tfsec
        id: install-tfsec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec --version

      - name: Run tfsec Security Scan
        id: tfsec-scan
        run: |
          tfsec .
        continue-on-error: true

      - name: Post tfsec Scan Results to PR
        if: ${{ steps.tfsec-scan.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const tfsecOutput = fs.readFileSync('tfsec.log', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `### tfsec Security Scan Results\n\`\`\`\n${tfsecOutput}\n\`\`\``
            });

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="region=${{ env.S3_AWS_REGION }}" \
            -backend-config="bucket=${{ env.TF_STATE_S3_BUCKET }}" \
            -backend-config="key=${{ inputs.TF_ENVIRONMENT }}/${{ env.TF_STATE_FILE_KEY }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_DYNAMODB_TABLE }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file=./environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars \
                         -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" > plan.txt

      - name: Post Terraform Plan to PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('plan.txt', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `### Terraform Plan Results\n\`\`\`\n${planOutput}\n\`\`\``
            });

  deploy-infrastructure:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHub-Actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="bucket=${{ env.TF_STATE_S3_BUCKET }}" \
            -backend-config="key=${{ inputs.TF_ENVIRONMENT }}/${{ env.TF_STATE_FILE_KEY }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_DYNAMODB_TABLE }}"

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file=./environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars \
                         -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Terraform Apply
        run: |
          terraform apply -var-file=./environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars \
                          -auto-approve \
                          -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}"
